# Iniciar com a imagem base do Python
#FROM python:3.11-slim

# Atualizar os pacotes e instalar certificados SSL
#RUN apt-get update && apt-get install -y ca-certificates

# Atualizar o pip
#RUN python -m pip install --upgrade pip

# Instalar as dependências sem cache, com hosts confiáveis
#RUN pip install --no-cache-dir --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org -r requirements.txt

# Copiar o restante dos arquivos do projeto para dentro do container
#COPY . .

# Configurar o Flask
#ENV FLASK_APP=app.py

# Expor a porta 5000 para acesso externo
#EXPOSE 5000

# Comando para rodar o Flask
#CMD ["flask", "run", "--host=0.0.0.0", "--port=5000", "--debug"]

#COPY app/requirements.txt /app/requirements.txt
#WORKDIR /app
#RUN pip install --no-cache-dir --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org -r requirements.txt

# Iniciar com a imagem base do Python
FROM python:3.11-slim

# Atualizar os pacotes e instalar certificados SSL
RUN apt-get update && apt-get install -y ca-certificates

# Definir o diretório de trabalho dentro do container
WORKDIR /app

# Copiar o arquivo de dependências primeiro para aproveitar o cache do Docker
COPY requirements.txt /app/

# Atualizar o pip e instalar as dependências antes de copiar o restante do código
RUN python -m pip install --upgrade pip
#RUN pip install --no-cache-dir -r requirements.txt

# Copiar o restante dos arquivos do projeto para dentro do container
COPY . /app

# Configurar o Flask
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Expor a porta 5000 para acesso externo
EXPOSE 5000

# Comando correto para rodar a aplicação Flask
CMD ["python", "app.py"]
